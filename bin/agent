#!/bin/bash

# This script is used to start OATS in agent mode and communicate with OCC.

[ "$OS" ] || export OS=$(uname)
if [ "$OS" == "Windows_NT" ]; then
    export PATH="$PATH:/cygdrive/c/apps/cygwin/bin"
    [ "$HOSTNAME" ] || HOSTNAME="$COMPUTERNAME"
else
    [ "$HOSTNAME" ] || HOSTNAME=`hostname`
fi
export HOSTNAME
NICKNAME=${HOSTNAME/.*}
doc="
Starts OATS agent to be used with OCC

USAGE: agent [-k[ill]] [-n[ickname] NICKNAME] [ -p[ort] PORT ] [ -r[epo] REPOSITORY_VERSION ] [ -u OATS_USER]

Parameters:
 -n NICKNAME OCC ID of the agent. Default: $NICKNAME
 -p PORT Agent port to communicate with OCC. Default is port previously
    used for NICKNAME.
 -u OATS_USER who started the agent. Used for logging purposes only.
 -r REPOSITORY_VERSION Required to update the agent.
 -d DISPLAY_NUM Number of the VNC Display, for Linux only
 -k kill the agent
 -t tail the agent log to the console, blocking the invoking command shell.

Example:
/home/occadmin/oats/bin/agent -p 3011 -n occ_1 -r 403cc620c265db84dbd3fb7d7cce4d57416bff09

The agent script should be in the path so that ssh from occ can pick it up.
Git requires definition of OATS_GIT_REPOSITORY environment variable.
 "
input_pars="$@"
while [ "$1" ]; do
    case $1 in
	-p*) shift; PORT="$1" ;;
	-r*) shift; REPOSITORY_VERSION="$1" ;;
	-u*) shift; OATS_USER="$1" ;;
	-n*) shift; NICKNAME="$1" ;;
	-d*) shift; DISPLAY_NUM="$1" ;;
	-k*) KILL_AGENT='KILL_AGENT' ;;
	-t*) TAIL_LOG='TAIL_LOG' ;;
	*) echo "Unrecognized parameter: $1" ;
	    echo "$doc"
	    exit ;;
    esac
    shift
done

function agent_echo {
    echo "$(date +'%m/%d/%H:%M:%S') $*"
}
function fkill {
    agent_echo "Killing PID: $each_pid"
    if [ "$OS" == "Windows_NT" ]; then
	pskill $1
    else
	kill -9 $1
    fi
}

function run {
    agent_echo  "$0 $input_pars" 

    if [ -n "$(echo "$GEM_HOME" | grep ruby-1.9.2)" ]; then
    # If spawned from OCC, running 1.9.2, we need to switch to 1.8 since
    # can't run oauth in 1.9.2. Assume RVM is installed and the system ruby is 1.8.X
	if [ -n "$(echo "$rvm_ruby_global_gems_path" | grep ruby-1.9.2)" ] && [[ -s "$HOME/.rvm/scripts/rvm" ]]; then
	    source "$HOME/.rvm/scripts/rvm" # Load RVM function
	    rvm system
	fi
    fi
    # Need these off when called by OCC
    unset BUNDLE_BIN_PATH BUNDLE_GEMFILE GEM_HOME GEM_PATH MY_RUBY_HOME # RAILS_ENV 
    unset RUBYOPT
    if [ -z "$OATS_HOME" ]; then
	cd $(dirname $(type -p $0))/..
	OATS_HOME=$PWD
    fi
    [ "$OATS_GIT_REPOSITORY" ] && OATS_HOME="$HOME/results_archive/$NICKNAME"/oats
    export OATS_HOME
    export OATS_AGENT_LOGFILE="$logFile"
    oats_bin="$OATS_HOME/bin"
#    [ "$OS" == "Windows_NT" ] && oats_bin=$(cygpath -w $oats_bin)
#    ruby_com="$oats_bin/oats -n $NICKNAME -p $PORT"
    ruby_com="oats -n $NICKNAME -p $PORT"
    export PATH="$PATH:$OATS_HOME/bin:$OATS_HOME/bin/$OS"
    if [ -e "$config_agent_file" ]; then
	line=$(grep "^$NICKNAME" "$config_agent_file")
	read nickname PREV_PORT pid display<<< $line
	[ "$PORT" ] || PORT=$PREV_PORT
	[ "$PID" ] || PID=$pid
	if [ -z "$DISPLAY_NUM" ]; then
	    if [ "$display" ]; then
		DISPLAY_NUM=$(echo "$display" | sed -e 's/.*:\(.\).*/\1/')
		[ "$DISPLAY_NUM" ] || DISPLAY_NUM="$display"
	    else
		DISPLAY_NUM='0'
	    fi
	fi
    fi
    if [ -z "$PORT" ]; then
	agent_echo "$0: Must specify a port, exiting..." >&2
    exit 1
    fi

    [ "$PORT" == "$PREV_PORT" ] && PREV_PORT=''
    for PORT_VAR in $PREV_PORT $PORT; do
	skip_port=''
	if [ "$PID" -a "$PORT_VAR" == "$PREV_PORT" ]; then
            agent_echo "Attempting to kill agent $NICKNAME with PID: $PID"
	    fkill $PID
	    [ $? == 0 ] && skip_port=skip_port
	fi
	if [ -z "$skip_port" ]; then
	    # agent_echo "Attempting to kill process holding on to port $PORT_VAR"
	    if [ "$OS" == Darwin ]; then
		lines=$(ps -ef|grep "$ruby_com"|grep -v grep)
		PID=$(echo $(cut -c 6-11 <<< "$lines"))
	    else
		if [ "$OS" == Windows_NT ]; then # Killing the top level bash process doesn't cut it
		    lines=$(netstat -a -o 2>/dev/null| grep "$PORT_VAR .* LISTEN" )
		else
		    lines=$(netstat -n -p -l 2>/dev/null| grep "$PORT_VAR .* LISTEN" )
		fi
		PID=$(echo "$line" | sed 's/.* LISTEN[^ ]* *//;s/.ruby .*//')
		[ "$PID" -a "$PID" != "$line" ] || PID=''
	    fi
	    if [ "$PID" ]; then
		agent_echo "PS line(s): $lines"
		for each_pid in $PID; do
		    fkill $each_pid
		done
	    # else
	    # 	agent_echo "No agent is found on port $PORT_VAR"
	    fi
	fi
    done
    [ "$KILL_AGENT" ] && return

    if [ "$OATS_GIT_REPOSITORY" ]; then
	[ -d $OATS_HOME ] || git clone $OATS_GIT_REPOSITORY $OATS_HOME
	cd $OATS_HOME
        origin="$OATS_GIT_REPOSITORY"
        [ "$origin" ] || origin=origin
	if [ "$REPOSITORY_VERSION" ]; then
	    for i in 1 2; do
		out=$(git checkout $REPOSITORY_VERSION 2>&1) && break # may detach HEAD, but it is OK
		if [ "$out" == "fatal: reference is not a tree: $REPOSITORY_VERSION" ]; then
		    echo -n "Need to pull requested version: $REPOSITORY_VERSION "
		else
		    echo "$out"
		fi
		git pull $origin master # fast-forward master from origin
	    done
        else
            git pull $origin master # fast-forward master from origin
	fi
	OATS_CODE_VERSION=$(git rev-list HEAD -1) # last commit in checked out version
	if [ "${OATS_CODE_VERSION##$REPOSITORY_VERSION*}" ]; then
	    agent_echo "Could not update the code version $OATS_CODE_VERSION to $REPOSITORY_VERSION" >&2
	    return 2
	fi
	[ "$REPOSITORY_VERSION" ] || agent_echo "Using OATS code version: $OATS_CODE_VERSION"
    elif [ -d .svn ]; then
	COUNTER=0
	[ "$REPOSITORY_VERSION" ] && agent_echo "Requested OATS Version: $REPOSITORY_VERSION"
	while [ $COUNTER -lt 5 ]; do
            let COUNTER=COUNTER+1
	    OATS_CODE_VERSION=$(svn info $OATS_HOME | sed -n 's/Last Changed Rev: *//p')
	    [ "$REPOSITORY_VERSION" ] || break
	    [ "$OATS_CODE_VERSION" -ge "$REPOSITORY_VERSION" ] && break
	    [ $COUNTER -eq 1 ] || sleep 3
	    svn update $OATS_HOME 2>&1
	done
	if [ $COUNTER -eq 5 ]; then
	    agent_echo "Could not update the code version $OATS_CODE_VERSION to $REPOSITORY_VERSION" >&2
	    return 2
	fi
	agent_echo "Current OATS code version: $OATS_CODE_VERSION"
    else
	OATS_CODE_VERSION=$REPOSITORY_VERSION
	[ "$OATS_CODE_VERSION" ] && agent_echo "Setting OATS code version to the requested version: $OATS_CODE_VERSION]" # This is not set for development/debug
    fi
    export OATS_CODE_VERSION
#    echo "$NICKNAME $PORT" >| $config_agent_file
    if [ "$OS" == "Linux" ]; then # Do this with VNC displays
	# Allocate 2x as display. VNC takes 592x, vino takes next available from 59++
#	vnc_num="2$(echo $PORT | cut -c 4)"
	vnc_num="$DISPLAY_NUM"
	[ "$vnc_num" ] || vnc_num="1"
	pgrep -fl "Xvnc4 :$vnc_num" >/dev/null || vncserver :$vnc_num -SecurityTypes=None -geometry 1900x1060
	export DISPLAY=":$vnc_num.0"
	agent_echo "Setting DISPLAY to $DISPLAY"
    fi
    cd $OATS_HOME  # Needed for bundler
    agent_echo "Starting agent $NICKNAME on port $PORT"
    $ruby_com
}

dir="$HOME/results_archive/$NICKNAME"/agent_logs
[ -d $dir ] || mkdir -p $dir
config_agent_file="$dir/config-agent.txt"
logFile="$dir/agent_$(date +'%m%d%H%M%S').log"
agent_log_file="$dir/agent.log"
#set -vx
run >> $logFile 2>&1 &
jobs -l | tee -a $logFile
PID=$(jobs -p)
echo "$NICKNAME $PORT $PID $DISPLAY_NUM"  >| $config_agent_file
jobs -l
rm -f $agent_log_file
ln -s $logFile $agent_log_file
[ "$TAIL_LOG"  ] && tail -F $agent_log_file
